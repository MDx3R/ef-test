// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_usecase

import (
	"github.com/MDx3R/ef-test/internal/usecase/dto"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSubscriptionService creates a new instance of MockSubscriptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionService {
	mock := &MockSubscriptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscriptionService is an autogenerated mock type for the SubscriptionService type
type MockSubscriptionService struct {
	mock.Mock
}

type MockSubscriptionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionService) EXPECT() *MockSubscriptionService_Expecter {
	return &MockSubscriptionService_Expecter{mock: &_m.Mock}
}

// CalculateTotalCost provides a mock function for the type MockSubscriptionService
func (_mock *MockSubscriptionService) CalculateTotalCost(filter dto.TotalCostFilter) (int, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for CalculateTotalCost")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dto.TotalCostFilter) (int, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(dto.TotalCostFilter) int); ok {
		r0 = returnFunc(filter)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(dto.TotalCostFilter) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionService_CalculateTotalCost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateTotalCost'
type MockSubscriptionService_CalculateTotalCost_Call struct {
	*mock.Call
}

// CalculateTotalCost is a helper method to define mock.On call
//   - filter dto.TotalCostFilter
func (_e *MockSubscriptionService_Expecter) CalculateTotalCost(filter interface{}) *MockSubscriptionService_CalculateTotalCost_Call {
	return &MockSubscriptionService_CalculateTotalCost_Call{Call: _e.mock.On("CalculateTotalCost", filter)}
}

func (_c *MockSubscriptionService_CalculateTotalCost_Call) Run(run func(filter dto.TotalCostFilter)) *MockSubscriptionService_CalculateTotalCost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dto.TotalCostFilter
		if args[0] != nil {
			arg0 = args[0].(dto.TotalCostFilter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionService_CalculateTotalCost_Call) Return(n int, err error) *MockSubscriptionService_CalculateTotalCost_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockSubscriptionService_CalculateTotalCost_Call) RunAndReturn(run func(filter dto.TotalCostFilter) (int, error)) *MockSubscriptionService_CalculateTotalCost_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubscription provides a mock function for the type MockSubscriptionService
func (_mock *MockSubscriptionService) CreateSubscription(request dto.CreateSubscriptionCommand) (uuid.UUID, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dto.CreateSubscriptionCommand) (uuid.UUID, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(dto.CreateSubscriptionCommand) uuid.UUID); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dto.CreateSubscriptionCommand) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionService_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type MockSubscriptionService_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - request dto.CreateSubscriptionCommand
func (_e *MockSubscriptionService_Expecter) CreateSubscription(request interface{}) *MockSubscriptionService_CreateSubscription_Call {
	return &MockSubscriptionService_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", request)}
}

func (_c *MockSubscriptionService_CreateSubscription_Call) Run(run func(request dto.CreateSubscriptionCommand)) *MockSubscriptionService_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dto.CreateSubscriptionCommand
		if args[0] != nil {
			arg0 = args[0].(dto.CreateSubscriptionCommand)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionService_CreateSubscription_Call) Return(uUID uuid.UUID, err error) *MockSubscriptionService_CreateSubscription_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockSubscriptionService_CreateSubscription_Call) RunAndReturn(run func(request dto.CreateSubscriptionCommand) (uuid.UUID, error)) *MockSubscriptionService_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscription provides a mock function for the type MockSubscriptionService
func (_mock *MockSubscriptionService) DeleteSubscription(id uuid.UUID) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionService_DeleteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscription'
type MockSubscriptionService_DeleteSubscription_Call struct {
	*mock.Call
}

// DeleteSubscription is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockSubscriptionService_Expecter) DeleteSubscription(id interface{}) *MockSubscriptionService_DeleteSubscription_Call {
	return &MockSubscriptionService_DeleteSubscription_Call{Call: _e.mock.On("DeleteSubscription", id)}
}

func (_c *MockSubscriptionService_DeleteSubscription_Call) Run(run func(id uuid.UUID)) *MockSubscriptionService_DeleteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionService_DeleteSubscription_Call) Return(err error) *MockSubscriptionService_DeleteSubscription_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionService_DeleteSubscription_Call) RunAndReturn(run func(id uuid.UUID) error) *MockSubscriptionService_DeleteSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscription provides a mock function for the type MockSubscriptionService
func (_mock *MockSubscriptionService) GetSubscription(id uuid.UUID) (dto.SubscriptionDTO, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 dto.SubscriptionDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (dto.SubscriptionDTO, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) dto.SubscriptionDTO); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(dto.SubscriptionDTO)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionService_GetSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscription'
type MockSubscriptionService_GetSubscription_Call struct {
	*mock.Call
}

// GetSubscription is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockSubscriptionService_Expecter) GetSubscription(id interface{}) *MockSubscriptionService_GetSubscription_Call {
	return &MockSubscriptionService_GetSubscription_Call{Call: _e.mock.On("GetSubscription", id)}
}

func (_c *MockSubscriptionService_GetSubscription_Call) Run(run func(id uuid.UUID)) *MockSubscriptionService_GetSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionService_GetSubscription_Call) Return(subscriptionResponse dto.SubscriptionDTO, err error) *MockSubscriptionService_GetSubscription_Call {
	_c.Call.Return(subscriptionResponse, err)
	return _c
}

func (_c *MockSubscriptionService_GetSubscription_Call) RunAndReturn(run func(id uuid.UUID) (dto.SubscriptionDTO, error)) *MockSubscriptionService_GetSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubscriptions provides a mock function for the type MockSubscriptionService
func (_mock *MockSubscriptionService) ListSubscriptions(filter dto.SubscriptionFilter) ([]dto.SubscriptionDTO, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 []dto.SubscriptionDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dto.SubscriptionFilter) ([]dto.SubscriptionDTO, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(dto.SubscriptionFilter) []dto.SubscriptionDTO); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.SubscriptionDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dto.SubscriptionFilter) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionService_ListSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscriptions'
type MockSubscriptionService_ListSubscriptions_Call struct {
	*mock.Call
}

// ListSubscriptions is a helper method to define mock.On call
//   - filter dto.SubscriptionFilter
func (_e *MockSubscriptionService_Expecter) ListSubscriptions(filter interface{}) *MockSubscriptionService_ListSubscriptions_Call {
	return &MockSubscriptionService_ListSubscriptions_Call{Call: _e.mock.On("ListSubscriptions", filter)}
}

func (_c *MockSubscriptionService_ListSubscriptions_Call) Run(run func(filter dto.SubscriptionFilter)) *MockSubscriptionService_ListSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dto.SubscriptionFilter
		if args[0] != nil {
			arg0 = args[0].(dto.SubscriptionFilter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionService_ListSubscriptions_Call) Return(subscriptionResponses []dto.SubscriptionDTO, err error) *MockSubscriptionService_ListSubscriptions_Call {
	_c.Call.Return(subscriptionResponses, err)
	return _c
}

func (_c *MockSubscriptionService_ListSubscriptions_Call) RunAndReturn(run func(filter dto.SubscriptionFilter) ([]dto.SubscriptionDTO, error)) *MockSubscriptionService_ListSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubscription provides a mock function for the type MockSubscriptionService
func (_mock *MockSubscriptionService) UpdateSubscription(id uuid.UUID, request dto.UpdateSubscriptionCommand) error {
	ret := _mock.Called(id, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, dto.UpdateSubscriptionCommand) error); ok {
		r0 = returnFunc(id, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionService_UpdateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscription'
type MockSubscriptionService_UpdateSubscription_Call struct {
	*mock.Call
}

// UpdateSubscription is a helper method to define mock.On call
//   - id uuid.UUID
//   - request dto.UpdateSubscriptionCommand
func (_e *MockSubscriptionService_Expecter) UpdateSubscription(id interface{}, request interface{}) *MockSubscriptionService_UpdateSubscription_Call {
	return &MockSubscriptionService_UpdateSubscription_Call{Call: _e.mock.On("UpdateSubscription", id, request)}
}

func (_c *MockSubscriptionService_UpdateSubscription_Call) Run(run func(id uuid.UUID, request dto.UpdateSubscriptionCommand)) *MockSubscriptionService_UpdateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 dto.UpdateSubscriptionCommand
		if args[1] != nil {
			arg1 = args[1].(dto.UpdateSubscriptionCommand)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptionService_UpdateSubscription_Call) Return(err error) *MockSubscriptionService_UpdateSubscription_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionService_UpdateSubscription_Call) RunAndReturn(run func(id uuid.UUID, request dto.UpdateSubscriptionCommand) error) *MockSubscriptionService_UpdateSubscription_Call {
	_c.Call.Return(run)
	return _c
}
