// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_usecase

import (
	"github.com/MDx3R/ef-test/internal/domain/entity"
	"github.com/MDx3R/ef-test/internal/usecase/dto"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSubscriptionRepository creates a new instance of MockSubscriptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscriptionRepository is an autogenerated mock type for the SubscriptionRepository type
type MockSubscriptionRepository struct {
	mock.Mock
}

type MockSubscriptionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepository_Expecter {
	return &MockSubscriptionRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) Add(sub *entity.Subscription) error {
	ret := _mock.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*entity.Subscription) error); ok {
		r0 = returnFunc(sub)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockSubscriptionRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - sub *entity.Subscription
func (_e *MockSubscriptionRepository_Expecter) Add(sub interface{}) *MockSubscriptionRepository_Add_Call {
	return &MockSubscriptionRepository_Add_Call{Call: _e.mock.On("Add", sub)}
}

func (_c *MockSubscriptionRepository_Add_Call) Run(run func(sub *entity.Subscription)) *MockSubscriptionRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *entity.Subscription
		if args[0] != nil {
			arg0 = args[0].(*entity.Subscription)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_Add_Call) Return(err error) *MockSubscriptionRepository_Add_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionRepository_Add_Call) RunAndReturn(run func(sub *entity.Subscription) error) *MockSubscriptionRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateTotalCost provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) CalculateTotalCost(filter dto.TotalCostFilter) (int, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for CalculateTotalCost")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dto.TotalCostFilter) (int, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(dto.TotalCostFilter) int); ok {
		r0 = returnFunc(filter)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(dto.TotalCostFilter) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionRepository_CalculateTotalCost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateTotalCost'
type MockSubscriptionRepository_CalculateTotalCost_Call struct {
	*mock.Call
}

// CalculateTotalCost is a helper method to define mock.On call
//   - filter dto.TotalCostFilter
func (_e *MockSubscriptionRepository_Expecter) CalculateTotalCost(filter interface{}) *MockSubscriptionRepository_CalculateTotalCost_Call {
	return &MockSubscriptionRepository_CalculateTotalCost_Call{Call: _e.mock.On("CalculateTotalCost", filter)}
}

func (_c *MockSubscriptionRepository_CalculateTotalCost_Call) Run(run func(filter dto.TotalCostFilter)) *MockSubscriptionRepository_CalculateTotalCost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dto.TotalCostFilter
		if args[0] != nil {
			arg0 = args[0].(dto.TotalCostFilter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_CalculateTotalCost_Call) Return(n int, err error) *MockSubscriptionRepository_CalculateTotalCost_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockSubscriptionRepository_CalculateTotalCost_Call) RunAndReturn(run func(filter dto.TotalCostFilter) (int, error)) *MockSubscriptionRepository_CalculateTotalCost_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) Delete(id uuid.UUID) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSubscriptionRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockSubscriptionRepository_Expecter) Delete(id interface{}) *MockSubscriptionRepository_Delete_Call {
	return &MockSubscriptionRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockSubscriptionRepository_Delete_Call) Run(run func(id uuid.UUID)) *MockSubscriptionRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_Delete_Call) Return(err error) *MockSubscriptionRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionRepository_Delete_Call) RunAndReturn(run func(id uuid.UUID) error) *MockSubscriptionRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) Get(id uuid.UUID) (*entity.Subscription, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*entity.Subscription, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *entity.Subscription); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSubscriptionRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockSubscriptionRepository_Expecter) Get(id interface{}) *MockSubscriptionRepository_Get_Call {
	return &MockSubscriptionRepository_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockSubscriptionRepository_Get_Call) Run(run func(id uuid.UUID)) *MockSubscriptionRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_Get_Call) Return(subscription *entity.Subscription, err error) *MockSubscriptionRepository_Get_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *MockSubscriptionRepository_Get_Call) RunAndReturn(run func(id uuid.UUID) (*entity.Subscription, error)) *MockSubscriptionRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) List(filter dto.SubscriptionFilter) ([]*entity.Subscription, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entity.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dto.SubscriptionFilter) ([]*entity.Subscription, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(dto.SubscriptionFilter) []*entity.Subscription); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dto.SubscriptionFilter) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSubscriptionRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - filter dto.SubscriptionFilter
func (_e *MockSubscriptionRepository_Expecter) List(filter interface{}) *MockSubscriptionRepository_List_Call {
	return &MockSubscriptionRepository_List_Call{Call: _e.mock.On("List", filter)}
}

func (_c *MockSubscriptionRepository_List_Call) Run(run func(filter dto.SubscriptionFilter)) *MockSubscriptionRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dto.SubscriptionFilter
		if args[0] != nil {
			arg0 = args[0].(dto.SubscriptionFilter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_List_Call) Return(subscriptions []*entity.Subscription, err error) *MockSubscriptionRepository_List_Call {
	_c.Call.Return(subscriptions, err)
	return _c
}

func (_c *MockSubscriptionRepository_List_Call) RunAndReturn(run func(filter dto.SubscriptionFilter) ([]*entity.Subscription, error)) *MockSubscriptionRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockSubscriptionRepository
func (_mock *MockSubscriptionRepository) Update(sub *entity.Subscription) error {
	ret := _mock.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*entity.Subscription) error); ok {
		r0 = returnFunc(sub)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSubscriptionRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - sub *entity.Subscription
func (_e *MockSubscriptionRepository_Expecter) Update(sub interface{}) *MockSubscriptionRepository_Update_Call {
	return &MockSubscriptionRepository_Update_Call{Call: _e.mock.On("Update", sub)}
}

func (_c *MockSubscriptionRepository_Update_Call) Run(run func(sub *entity.Subscription)) *MockSubscriptionRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *entity.Subscription
		if args[0] != nil {
			arg0 = args[0].(*entity.Subscription)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubscriptionRepository_Update_Call) Return(err error) *MockSubscriptionRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionRepository_Update_Call) RunAndReturn(run func(sub *entity.Subscription) error) *MockSubscriptionRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
